@page "/"
@using Microsoft.AspNetCore.Components.Forms;
@using Karambolo.PO;
@using System.Text
@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration
@inject IJSRuntime Js

<main class="js-page" style="flex-grow: 1; background-color: #f5f5fa; position: relative;">
    <div class="js-drop-overlay" style="display: none; font-weight: 600; font-size: 28px; line-height: 30px; min-height: 100%; position: absolute; z-index: 9999; width: 100%; inset: 0; background-color: rgb(0, 0, 0, 0.8); text-align: center; color: #fff; padding: 230px;">
        Drop files here!
    </div>
    
    <div class="d-flex flex-column align-items-center mx-auto" style="max-width: 800px">
        <h1 class="fw-bold pt-5" style="color: #33333b;">Convert PO to CSV</h1>
        <span class="fs-5 text-center mb-5">Editing translation files made easy.</span>
        
        @if (Files.Count == 0)
        {
            <InputFileUpload OnChange="@HandleSelectedFiles" Title="Upload files"/>
        }
    </div>
    
    @if (Files.Count != 0)
    {
        <div>
            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 10px;">
                @for (var i = 0; i < Files.Count; i++)
                {
                    var fileIdx = i;
                    var file = Files[fileIdx];
                    <div class="p-2 card d-flex flex-row justify-content-between">
                        <span class="d-flex align-items-center">@file.FileName</span>
                        <button @onclick="() => RemoveFile(fileIdx)" class="btn btn-danger">X</button>
                    </div>
                }
            </div>
        </div>

        <button class="btn btn-primary mt-2" @onclick="DownloadCsv">Convert to CSV</button>
    }
</main>

<script>
document.querySelector('.js-page').addEventListener('dragover', (e) => {
    e.preventDefault(); // This is necessary to allow a drop
    // Check if user is dragging html elements on page (kind: 'string' | 'other')
    if (Array.from(e.dataTransfer.items).some(x => x.kind !== 'file')) {
        return;
    }
    document.querySelector('.js-drop-overlay').style.display = 'block';
})

document.querySelector('.js-page').addEventListener('drop', (e) => {
    e.preventDefault();
    console.log("drop");
    document.querySelector('.js-drop-overlay').style.display = 'none';
    
    // items vs files - items (DataTransfer interface) is the new implementation, files is older (DataTransferItemList interface). Files do not exist on dragover
    if (e.dataTransfer.items) {
        for (let i = 0; i < e.dataTransfer.items.length; i++) {
            if (e.dataTransfer.items[i].kind === 'file') {
                let file = e.dataTransfer.items[i].getAsFile();
                console.log('file[' + i + '].name = ' + file.name);
                processFile(file);
            }
        }
    } else {
        for (let i = 0; i < e.dataTransfer.files.length; i++) {
            console.log('file[' + i + '].name = ' + e.dataTransfer.files[i].name);
            processFile(e.dataTransfer.files[i]);
        }
    }
})

function processFile(file) {
    console.log('processFile');
}

document.querySelector('.js-page').addEventListener('dragleave', () => {
    document.querySelector('.js-drop-overlay').style.display = 'none';
})
</script>

@code {
    public Dictionary<POKey, List<string>> Translations = new();
    public List<FileData> Files = new();
    public IDictionary<string, string> Headers = new Dictionary<string, string>();

    public class FileData
    {
        public string FileName { get; set; } = default!;
        public string FileContent { get; set; } = default!;
    }

    public void RemoveFile(int i)
    {
        Files.RemoveAt(i);
    }

    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        Translations = new();
        Console.WriteLine("HandleSelectedFiles");
        Console.WriteLine(string.Join(", ", e.GetMultipleFiles().Select(x => x.Name).ToArray()));
        if (! e.GetMultipleFiles().All(file => file.Name.EndsWith(".po")))
        {
            Console.WriteLine("Wrong file type uploaded!");
            return;
        }
        foreach (var file in e.GetMultipleFiles())
        {
            var fileContent = await ReadFile(file);
            Files.Add(new FileData()
            {
                FileName = file.Name,
                FileContent = fileContent
            });
            var parser = new POParser(new POParserSettings());
            var parseResult = parser.Parse(fileContent);
            Headers = parseResult.Catalog.Headers;
            if (!parseResult.Success)
            {
                throw new ArgumentException("File could not be parsed!");    
            }
            foreach (var entry in parseResult.Catalog.Values)
            {
                if (!Translations.ContainsKey(entry.Key))
                {
                    Translations[entry.Key] = new List<string>();
                }
                Translations[entry.Key].AddRange(entry);
            }
            
            Console.WriteLine("Reading complete");
            
            
        }
    }
    
    public static async Task<string> ReadFile(IBrowserFile file)
    {
        var result = new StringBuilder();
        var buffer = new char[1024];
        int read;

        using var reader = new StreamReader(file.OpenReadStream(), Encoding.UTF8);
        while ((read = await reader.ReadAsync(buffer, 0, buffer.Length)) > 0)
        {
            result.Append(buffer, 0, read);
        }

        return result.ToString();
    }


    public static string ConvertToCsv(Dictionary<POKey, List<string>> translations, List<string> fileNames)
    {
        using var memoryStream = new MemoryStream();
        using var streamWriter = new StreamWriter(memoryStream, new UTF8Encoding(true));
        using var csvWriter = new CsvWriter(streamWriter, new CsvConfiguration(CultureInfo.InvariantCulture));
        // Write the header
        csvWriter.WriteField("Id");
        csvWriter.WriteField("Context");
        foreach (var fileName in fileNames)
        {
            csvWriter.WriteField(fileName);
        }
        csvWriter.NextRecord();

        // Write each record
        foreach (var entry in translations)
        {
            csvWriter.WriteField(entry.Key.Id);
            csvWriter.WriteField(entry.Key.ContextId);

            foreach (var translation in entry.Value)
            {
                csvWriter.WriteField(translation);
            }
            csvWriter.NextRecord();
        }

        streamWriter.Flush();
        return Encoding.UTF8.GetString(memoryStream.ToArray());
    }


    private async Task DownloadCsv()
    {
        string csvContent = ConvertToCsv(Translations, Files.Select(file => file.FileName).ToList());
        // Use JavaScript to click the link
        await Js.InvokeVoidAsync("downloadCsvFile", csvContent, "translations.csv");
    }
    
}